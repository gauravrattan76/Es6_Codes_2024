Closure in Javascript-


A closure in JavaScript is a function that "remembers" the variables from its lexical scope, even after the outer function has finished executing.

An inner function is defined inside an outer function.
The inner function has access to the outer function's variables, even after the outer function has finished executing.


function outer(){
    let outvar = 0;
    return function(){
       return ++outvar;
    }
}

const d = outer(); here in d we get the inner function
console.log(d())
console.log(d())
console.log(d())
console.log(d())



________________________________


function outer(){
    let outvar = 0;
  
    return {
        increment:  function(){
            return outvar++;
        },
        decrement: function(){
            return outvar--;
        }
    }
}

const d = outer();
console.log(d.increment())
console.log(d.increment())
console.log(d.increment())
console.log(d.decrement())
console.log(d.decrement())

_________________


Why var and let behave different with closures

var is Function-Scoped, While let is Block-Scoped
* var is function-scoped, meaning it is shared across the entire function (or globally if declared outside any function).
* let is block-scoped, meaning it is re-created for each block (inside loops, conditionals, etc.).


for (var i = 1; i <= 3; i++)
 { setTimeout(function()
 { console.log(i);
 }, 1000); }

Output - 4, as ts global scope
_________


for (let i = 1; i <= 3; i++) 
{ setTimeout(function()
 { console.log(i); 
}, 1000); }



let i is block-scoped, meaning a new i is created for each loop iteration.
Each setTimeout closure captures a separate i.
When the timeout runs, it remembers the correct i for that iteration.

1,2,3
__________



for (var i = 1; i <= 3; i++) { 
(function(i) { setTimeout(function() { console.log(i); }, 1000); })
(i); }


The IIFE (function(i) { ... })(i) creates a new copy of i in each iteration.
Each setTimeout function captures a different i.










