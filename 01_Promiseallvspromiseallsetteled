Code samples -
__________________

𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹() 𝘃𝘀 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹𝗦𝗲𝘁𝘁𝗹𝗲𝗱() 𝘃𝘀 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗿𝗮𝗰𝗲() 𝘃𝘀 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗻𝘆()😀

𝟭.𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹()-
Promise.all() takes an array of promises and returns a single promise that resolves when all of the input promises have resolved.

𝗖𝗼𝗱𝗲-

const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 500);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     resolve("promise 2 is resolved")
   }, 1000);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 2000);
})

Promise.all([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))

𝗢𝘂𝘁𝗽𝘂𝘁-

[ 'promise 1 resolved', 'promise 2 resolved', 'promise 3 resolved' ]

—————

If any of the promise reject, Promise.all() will reject immediately with the reason of the first promise that rejects.
𝗖𝗼𝗱𝗲-
const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 500);
})

const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     reject("promise 2 is rejected")
   }, 1000);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 2000);
})


Promise.all([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))

𝗢𝘂𝘁𝗽𝘂𝘁𝘀 -

promise 2 is rejected

_________________________

𝟮.𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹𝗦𝗲𝘁𝘁𝗹𝗲𝗱()-

Promise.allSettled() returns a promise that resolves when all input promises have settled (either resolved or rejected), and it gives you the results of all promises.


Use Case: When you want to wait for all promises to finish (whether they succeed or fail) and you want to know the outcome of each.


const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 500);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     resolve("promise 2 is resolved")
   }, 1000);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 2000);
})


Promise.allSettled([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))



Output -

Array of object-
Has status and value field keys

[
  { status: 'fulfilled', value: 'promise 1 resolved' },
  { status: 'fulfilled', value: 'promise 2 is resolved' },
  { status: 'fulfilled', value: 'promise 3 resolved' }
]

________________________________________

In case any of the promise is rejected-

const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 500);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     reject("promise 2 is rejected")
   }, 1000);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 2000);
})


Promise.allSettled([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))


Output -

[
  { status: 'fulfilled', value: 'promise 1 resolved' },
  { status: 'rejected', reason: 'promise 2 is rejected' },
  { status: 'fulfilled', value: 'promise 3 resolved' }
]

____________________

𝟯.𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗿𝗮𝗰𝗲() -


Promise.race() takes an array of promises and returns a promise that resolves or rejects as soon as the first promise resolves or rejects.
It only cares about the first promise to resolve or reject, and ignores the others.


const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 800);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     reject("promise 2 is rejected")
   }, 300);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 1000);
})


Promise.race([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))


Output -

promise 2 is rejected


___________________

𝟰.𝗽𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗻𝘆()-

Promise.any() takes an array (or iterable) of promises and returns a promise that resolves as soon as any of the input promises resolves.

const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 800);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     resolve("promise 2 is resolved")
   }, 300);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 1000);
})


Promise.any([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))



Output -

promise 2 is resolved


______________

𝗜𝗻 𝗰𝗮𝘀𝗲 𝗼𝗳 𝗮𝗻𝘆 𝗽𝗿𝗼𝗺𝗶𝘀𝗲 𝗶𝘀 𝗿𝗲𝗷𝗲𝗰𝘁𝗲𝗱, 𝗶𝘁 𝘀𝘁𝗶𝗹𝗹 𝘀𝗵𝗼𝘄𝘀 𝘁𝗵𝗲 𝗳𝗶𝗿𝘀𝘁 𝗿𝗲𝘀𝗼𝗹𝘃𝗲𝗱 𝗼𝗻𝗲-

const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 1 resolved");
   }, 800);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     reject("promise 2 is rejected")
   }, 300);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      resolve("promise 3 resolved");
   }, 1000);
})


Promise.any([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))



Output-

Promise 1 is resolved 
——————————

If all Promise  reject then  it rejects with an AggregateError.


const promise1 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      reject("promise 1 rejcted");
   }, 800);
})
const promise2 = new Promise((resolve, reject) =>{
   setTimeout(() => {
     reject("promise 2 is rejected")
   }, 300);
})

const promise3 = new Promise((resolve, reject) =>{
   setTimeout(() => {
      reject("promise 3 reject");
   }, 1000);
})


Promise.any([promise1,promise2,promise3])
.then(res =>  console.log(res))
.catch(ex => console.log(ex))

Output-

[AggregateError: All promises were rejected] {
  [errors]: [ 'promise 1 rejcted', 'promise 2 is rejected', 'promise 3 reject' ]
}


___________________


𝗞𝗲𝘆 𝗗𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝗰𝗲𝘀
* 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹(): Resolves when all promises resolve, rejects if any promise rejects.
* 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗹𝗹𝗦𝗲𝘁𝘁𝗹𝗲𝗱(): Resolves when all promises settle (either resolve or reject) and provides information about each promise.
* 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗮𝗻𝘆(): Resolves when the first promise resolves, rejects if all promises reject.
* 𝗣𝗿𝗼𝗺𝗶𝘀𝗲.𝗿𝗮𝗰𝗲(): Resolves or rejects as soon as the first promise resolves or rejects.


